-- ============================================
-- PROCEDIMIENTO LLENA SEGUIMIENTO
-- ============================================
CREATE OR REPLACE PROCEDURE dw.PRC_LLENA_SEGUIMIENTO(p_dim IN VARCHAR2) IS
BEGIN
  INSERT INTO dw.BD2_SEGUIMIENTO VALUES (p_dim, USER, SYSDATE);
END;
/


-- ============================================
-- TRIGGERS PARA LLENADO DE KEYS EN DW (EJEMPLO: HORA)
-- ============================================
CREATE OR REPLACE TRIGGER TRG_DIM_HORA
BEFORE INSERT ON BD2_DIM_HORA
FOR EACH ROW
DECLARE
  v_key NUMBER;
BEGIN
  PRC_DEVUELVE_CORRELATIVOS('BD2_DIM_HORA', v_key);
  :NEW.HORA_KEY := v_key;
END;
/

-- ============================================
-- PROCEDIMIENTOS PARA LLENAR CADA DIMENSIÓN CON MERGE
-- ============================================
CREATE OR REPLACE PROCEDURE PRC_DIM_HORA(p_param IN NUMBER) IS
BEGIN
  IF p_param = 1 THEN
    MERGE INTO BD2_DIM_HORA D
    USING (SELECT DISTINCT HORA FROM BD2_STG_DATOS) S
    ON (D.HORA = S.HORA)
    WHEN NOT MATCHED THEN
      INSERT (HORA_KEY, HORA)
      VALUES (BD2_DIM_HORA_SEQ.NEXTVAL, S.HORA);
  ELSIF p_param = 2 THEN
    MERGE INTO BD2_DIM_HORA D
    USING (SELECT DISTINCT HORA_COD AS HORA FROM BD2_NO_HECHOS) S
    ON (D.HORA = S.HORA)
    WHEN NOT MATCHED THEN
      INSERT (HORA_KEY, HORA)
      VALUES (BD2_DIM_HORA_SEQ.NEXTVAL, S.HORA);
  END IF;
  PRC_LLENA_SEGUIMIENTO('BD2_DIM_HORA');
END;
/

CREATE OR REPLACE PROCEDURE PRC_DIM_RONDA(p_param IN NUMBER) IS
BEGIN
  IF p_param = 1 THEN
    MERGE INTO BD2_DIM_RONDA D
    USING (SELECT DISTINCT RONDA FROM BD2_STG_DATOS) S
    ON (D.NOMBRE_RONDA = S.RONDA)
    WHEN NOT MATCHED THEN
      INSERT (RONDA_KEY, NOMBRE_RONDA)
      VALUES (BD2_DIM_RONDA_SEQ.NEXTVAL, S.RONDA);
  ELSIF p_param = 2 THEN
    MERGE INTO BD2_DIM_RONDA D
    USING (SELECT DISTINCT NOMBRE_RONDA FROM BD2_NO_HECHOS) S
    ON (D.NOMBRE_RONDA = S.NOMBRE_RONDA)
    WHEN NOT MATCHED THEN
      INSERT (RONDA_KEY, NOMBRE_RONDA)
      VALUES (BD2_DIM_RONDA_SEQ.NEXTVAL, S.NOMBRE_RONDA);
  END IF;
  PRC_LLENA_SEGUIMIENTO('BD2_DIM_RONDA');
END;
/

-- BD2_DIM_SELECCION
CREATE OR REPLACE PROCEDURE PRC_DIM_SELECCION(p_param IN NUMBER) IS
BEGIN
  IF p_param = 1 THEN
    MERGE INTO BD2_DIM_SELECCION D
    USING (
      SELECT NOMBRE_SELECCION FROM (
        SELECT DISTINCT EQUIPO_LOCAL AS NOMBRE_SELECCION FROM BD2_STG_DATOS
        UNION
        SELECT DISTINCT EQUIPO_VISITA AS NOMBRE_SELECCION FROM BD2_STG_DATOS
      )
    ) S
    ON (D.NOMBRE_SELECCION = S.NOMBRE_SELECCION)
    WHEN NOT MATCHED THEN
      INSERT (SELECCION_KEY, NOMBRE_SELECCION)
      VALUES (BD2_DIM_SELECCION_SEQ.NEXTVAL, S.NOMBRE_SELECCION);
  ELSIF p_param = 2 THEN
    MERGE INTO BD2_DIM_SELECCION D
    USING (
      SELECT NOMBRE_SELECCION FROM (
        SELECT DISTINCT EQUIPO_LOCAL AS NOMBRE_SELECCION FROM BD2_NO_HECHOS
        UNION
        SELECT DISTINCT EQUIPO_VISITA AS NOMBRE_SELECCION FROM BD2_NO_HECHOS
      )
    ) S
    ON (D.NOMBRE_SELECCION = S.NOMBRE_SELECCION)
    WHEN NOT MATCHED THEN
      INSERT (SELECCION_KEY, NOMBRE_SELECCION)
      VALUES (BD2_DIM_SELECCION_SEQ.NEXTVAL, S.NOMBRE_SELECCION);
  END IF;
  PRC_LLENA_SEGUIMIENTO('BD2_DIM_SELECCION');
END;
/

CREATE SEQUENCE BD2_DIM_PAIS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE OR REPLACE PROCEDURE PRC_DIM_PAIS_ORGANIZADOR(p_param IN NUMBER) IS
BEGIN
  IF p_param = 1 THEN
    MERGE INTO BD2_DIM_PAIS_ORGANIZADOR D
    USING (SELECT DISTINCT PAIS FROM stage.BD2_STG_DATOS) S
    ON (D.NOMBRE_PAIS_ORGANIZADOR = S.PAIS)
    WHEN NOT MATCHED THEN
      INSERT (PAIS_KEY, NOMBRE_PAIS_ORGANIZADOR)
      VALUES (BD2_DIM_PAIS_SEQ.NEXTVAL, S.PAIS);
  ELSIF p_param = 2 THEN
    MERGE INTO BD2_DIM_PAIS_ORGANIZADOR D
    USING (SELECT DISTINCT PAIS FROM BD2_NO_HECHOS) S
    ON (D.NOMBRE_PAIS_ORGANIZADOR = S.PAIS)
    WHEN NOT MATCHED THEN
      INSERT (PAIS_KEY, NOMBRE_PAIS_ORGANIZADOR)
      VALUES (BD2_DIM_PAIS_SEQ.NEXTVAL, S.PAIS);
  END IF;
  PRC_LLENA_SEGUIMIENTO('BD2_DIM_PAIS_ORGANIZADOR');
END;
/


-- BD2_DIM_CIUDAD
CREATE SEQUENCE BD2_DIM_CIUDAD_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE OR REPLACE PROCEDURE PRC_DIM_CIUDAD(p_param IN NUMBER) IS
BEGIN
  IF p_param = 1 THEN
    MERGE INTO BD2_DIM_CIUDAD D
    USING (SELECT DISTINCT CIUDAD FROM stage.BD2_STG_DATOS) S
    ON (D.CIUDAD_ORGANIZADOR = S.CIUDAD)
    WHEN NOT MATCHED THEN
      INSERT (CIUDAD_KEY, CIUDAD_ORGANIZADOR, PAIS_KEY)
      VALUES (BD2_DIM_CIUDAD_SEQ.NEXTVAL, S.CIUDAD, NULL);
  ELSIF p_param = 2 THEN
    MERGE INTO BD2_DIM_CIUDAD D
    USING (SELECT DISTINCT CIUDAD FROM BD2_NO_HECHOS) S
    ON (D.CIUDAD_ORGANIZADOR = S.CIUDAD)
    WHEN NOT MATCHED THEN
      INSERT (CIUDAD_KEY, CIUDAD_ORGANIZADOR, PAIS_KEY)
      VALUES (BD2_DIM_CIUDAD_SEQ.NEXTVAL, S.CIUDAD, NULL);
  END IF;
  PRC_LLENA_SEGUIMIENTO('BD2_DIM_CIUDAD');
END;
/

-- BD2_DIM_ESTADIO
CREATE SEQUENCE BD2_DIM_ESTADIO_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE OR REPLACE PROCEDURE PRC_DIM_ESTADIO(p_param IN NUMBER) IS
BEGIN
  IF p_param = 1 THEN
    MERGE INTO BD2_DIM_ESTADIO D
    USING (SELECT DISTINCT ESTADIO FROM stage.BD2_STG_DATOS) S
    ON (D.NOMBRE_ESTADIO = S.ESTADIO)
    WHEN NOT MATCHED THEN
      INSERT (ESTADIO_KEY, NOMBRE_ESTADIO)
      VALUES (BD2_DIM_ESTADIO_SEQ.NEXTVAL, S.ESTADIO);
  ELSIF p_param = 2 THEN
    MERGE INTO BD2_DIM_ESTADIO D
    USING (SELECT DISTINCT ESTADIO FROM BD2_NO_HECHOS) S
    ON (D.NOMBRE_ESTADIO = S.ESTADIO)
    WHEN NOT MATCHED THEN
      INSERT (ESTADIO_KEY, NOMBRE_ESTADIO)
      VALUES (BD2_DIM_ESTADIO_SEQ.NEXTVAL, S.ESTADIO);
  END IF;
  PRC_LLENA_SEGUIMIENTO('BD2_DIM_ESTADIO');
END;
/










-- ============================================
-- PROCEDIMIENTO DE LLENADO DE HECHOS
-- ============================================
CREATE OR REPLACE PROCEDURE PRC_CONSTRUYE_HECHOS(p_param IN NUMBER) IS
BEGIN
  IF p_param = 1 THEN
    FOR r IN (
      SELECT * FROM BD2_STG_DATOS S
      LEFT JOIN BD2_DIM_HORA H ON S.HORA = H.HORA
      LEFT JOIN BD2_DIM_RONDA RON ON S.RONDA = RON.NOMBRE_RONDA
      LEFT JOIN BD2_DIM_ESTADIO EST ON S.ESTADIO = EST.NOMBRE_ESTADIO
      LEFT JOIN BD2_DIM_CIUDAD C ON S.CIUDAD = C.CIUDAD_ORGANIZADOR
      LEFT JOIN BD2_DIM_PAIS_ORGANIZADOR P ON S.PAIS = P.NOMBRE_PAIS_ORGANIZADOR
      LEFT JOIN BD2_DIM_SELECCION L ON S.EQUIPO_LOCAL = L.NOMBRE_SELECCION
      LEFT JOIN BD2_DIM_SELECCION V ON S.EQUIPO_VISITA = V.NOMBRE_SELECCION
    ) LOOP
      IF r.HORA_KEY IS NOT NULL AND r.RONDA_KEY IS NOT NULL AND r.ESTADIO_KEY IS NOT NULL AND
         r.CIUDAD_KEY IS NOT NULL AND r.PAIS_KEY IS NOT NULL AND r.LOCAL_KEY IS NOT NULL AND r.VISITANTE_KEY IS NOT NULL THEN
        INSERT INTO BD2_HECHOS VALUES (
          r.ANIO, TO_NUMBER(TO_CHAR(r.FECHA, 'YYYYMMDD')), r.HORA_KEY, r.RONDA_KEY,
          r.ESTADIO_KEY, r.LOCAL_KEY, r.VISITANTE_KEY, r.GOL_LOCAL, r.GOL_VISITA, r.ASISTENCIA
        );
      ELSE
        INSERT INTO BD2_NO_HECHOS (...); -- rellenar campos
      END IF;
    END LOOP;
  ELSIF p_param = 2 THEN
    FOR r IN (
      SELECT * FROM BD2_NO_HECHOS NH
      LEFT JOIN BD2_DIM_HORA H ON NH.HORA_COD = H.HORA
      -- Agregar los demás LEFT JOIN
    ) LOOP
      INSERT INTO BD2_HECHOS (...); -- rellenar campos
    END LOOP;
  END IF;
END;
/



-- ============================================
-- PROCEDIMIENTO PARA DETECTAR DIMENSIONES CON KEYS NULAS
-- ============================================
CREATE OR REPLACE PROCEDURE PRC_DIMENSIONES_FALTANTES IS
BEGIN
  FOR r IN (
    SELECT DISTINCT 'BD2_DIM_HORA' AS DIM FROM BD2_NO_HECHOS WHERE HORA_KEY IS NULL
    UNION ALL
    SELECT DISTINCT 'BD2_DIM_RONDA' FROM BD2_NO_HECHOS WHERE RONDA_KEY IS NULL
    UNION ALL
    SELECT DISTINCT 'BD2_DIM_ESTADIO' FROM BD2_NO_HECHOS WHERE ESTADIO_KEY IS NULL
    UNION ALL
    SELECT DISTINCT 'BD2_DIM_CIUDAD' FROM BD2_NO_HECHOS WHERE CIUDAD IS NULL
    UNION ALL
    SELECT DISTINCT 'BD2_DIM_PAIS_ORGANIZADOR' FROM BD2_NO_HECHOS WHERE PAIS IS NULL
    UNION ALL
    SELECT DISTINCT 'BD2_DIM_SELECCION' FROM BD2_NO_HECHOS WHERE EQUIPO_LOCAL IS NULL OR EQUIPO_VISITA IS NULL
  ) LOOP
    IF r.DIM = 'BD2_DIM_HORA' THEN PRC_DIM_HORA(2);
    ELSIF r.DIM = 'BD2_DIM_RONDA' THEN PRC_DIM_RONDA(2);
    -- Y así sucesivamente para las demás dimensiones
    END IF;
  END LOOP;
END;
/
